window.GRUPO12 = // @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { init: peg$parseinit };
  var peg$startRuleFunction = peg$parseinit;

  var peg$c0 = "global";
  var peg$c1 = ".global";
  var peg$c2 = ".globl";
  var peg$c3 = ".section";
  var peg$c4 = ".data";
  var peg$c5 = ".text";
  var peg$c6 = ".bss";
  var peg$c7 = ".rodata";
  var peg$c8 = ".init";
  var peg$c9 = ".plt";
  var peg$c10 = ".got";
  var peg$c11 = ".debug";
  var peg$c12 = ".reldata";
  var peg$c13 = ".";
  var peg$c14 = "blr ";
  var peg$c15 = "blt";
  var peg$c16 = "b.lt";
  var peg$c17 = "bls";
  var peg$c18 = "b.ls";
  var peg$c19 = "blo";
  var peg$c20 = "b.lo";
  var peg$c21 = "ble";
  var peg$c22 = "b.le";
  var peg$c23 = "bl ";
  var peg$c24 = "br ";
  var peg$c25 = "b";
  var peg$c26 = "cbnz ";
  var peg$c27 = "cbz ";
  var peg$c28 = "ret";
  var peg$c29 = "tbnz ";
  var peg$c30 = "tbz ";
  var peg$c31 = "lt";
  var peg$c32 = "ls";
  var peg$c33 = "le";
  var peg$c34 = "eq";
  var peg$c35 = "ne";
  var peg$c36 = "gt";
  var peg$c37 = "cs";
  var peg$c38 = "hs";
  var peg$c39 = "cc";
  var peg$c40 = "lo";
  var peg$c41 = "mi";
  var peg$c42 = "pl";
  var peg$c43 = "vs";
  var peg$c44 = "vc";
  var peg$c45 = "hi";
  var peg$c46 = "ge";
  var peg$c47 = "al";
  var peg$c48 = "add ";
  var peg$c49 = "adds ";
  var peg$c50 = "adc ";
  var peg$c51 = "adcs ";
  var peg$c52 = "adrp ";
  var peg$c53 = "adr ";
  var peg$c54 = "cmn ";
  var peg$c55 = "cmp ";
  var peg$c56 = "madd ";
  var peg$c57 = "mneg ";
  var peg$c58 = "msub ";
  var peg$c59 = "mul ";
  var peg$c60 = "neg ";
  var peg$c61 = "negs ";
  var peg$c62 = "ngc ";
  var peg$c63 = "ngcs ";
  var peg$c64 = "sbc ";
  var peg$c65 = "sbcs ";
  var peg$c66 = "sdiv ";
  var peg$c67 = "smaddl ";
  var peg$c68 = "smnegl ";
  var peg$c69 = "smsubl ";
  var peg$c70 = "smulh ";
  var peg$c71 = "smull ";
  var peg$c72 = "sub ";
  var peg$c73 = "subs ";
  var peg$c74 = "udiv ";
  var peg$c75 = "umaddl ";
  var peg$c76 = "umnegl ";
  var peg$c77 = "umsubl ";
  var peg$c78 = "umulh ";
  var peg$c79 = "umull ";
  var peg$c80 = "fmov ";
  var peg$c81 = "movk ";
  var peg$c82 = "lsl ";
  var peg$c83 = "movn ";
  var peg$c84 = "movz ";
  var peg$c85 = "mov ";
  var peg$c86 = "ldpsw ";
  var peg$c87 = "ld";
  var peg$c88 = "u";
  var peg$c89 = "rsw";
  var peg$c90 = " ";
  var peg$c91 = "rs";
  var peg$c92 = "r";
  var peg$c93 = "ldp ";
  var peg$c94 = "a";
  var peg$c95 = "xp ";
  var peg$c96 = "x";
  var peg$c97 = "ldnp ";
  var peg$c98 = "ldtr";
  var peg$c99 = "ldtrs";
  var peg$c100 = "ldtrsw ";
  var peg$c101 = "prfm ";
  var peg$c102 = "stp ";
  var peg$c103 = "st";
  var peg$c104 = "stlr";
  var peg$c105 = "l";
  var peg$c106 = "xr";
  var peg$c107 = "stnp ";
  var peg$c108 = "sttr";
  var peg$c109 = "and ";
  var peg$c110 = "ands ";
  var peg$c111 = "bic ";
  var peg$c112 = "bics ";
  var peg$c113 = "eon ";
  var peg$c114 = "eor ";
  var peg$c115 = "orr ";
  var peg$c116 = "mvn ";
  var peg$c117 = "orn ";
  var peg$c118 = "tst ";
  var peg$c119 = "lsr ";
  var peg$c120 = "asr ";
  var peg$c121 = "ror ";
  var peg$c122 = "at ";
  var peg$c123 = "s1";
  var peg$c124 = "2";
  var peg$c125 = "e";
  var peg$c126 = "brk ";
  var peg$c127 = "clrex";
  var peg$c128 = "dmb ";
  var peg$c129 = "dsb ";
  var peg$c130 = "eret";
  var peg$c131 = "hvc ";
  var peg$c132 = "isb";
  var peg$c133 = " sy";
  var peg$c134 = "mrs ";
  var peg$c135 = "msr ";
  var peg$c136 = "nop";
  var peg$c137 = "sev";
  var peg$c138 = "sevl";
  var peg$c139 = "smc ";
  var peg$c140 = "svc ";
  var peg$c141 = "wfe";
  var peg$c142 = "wfi";
  var peg$c143 = "yield";
  var peg$c144 = "osh";
  var peg$c145 = "nsh";
  var peg$c146 = "ish";
  var peg$c147 = "sy";
  var peg$c148 = "bfxil ";
  var peg$c149 = "bfi ";
  var peg$c150 = "cls ";
  var peg$c151 = "clz ";
  var peg$c152 = "extr ";
  var peg$c153 = "rbit ";
  var peg$c154 = "rev ";
  var peg$c155 = "rev16 ";
  var peg$c156 = "rev32 ";
  var peg$c157 = "bfiz ";
  var peg$c158 = "bfx ";
  var peg$c159 = "xt";
  var peg$c160 = "sxtw ";
  var peg$c161 = "cas";
  var peg$c162 = "p";
  var peg$c163 = "ldao";
  var peg$c164 = "stao";
  var peg$c165 = "swp";
  var peg$c166 = "ccmn ";
  var peg$c167 = "ccmp ";
  var peg$c168 = "cinc ";
  var peg$c169 = "cinv ";
  var peg$c170 = "cneg ";
  var peg$c171 = "csel ";
  var peg$c172 = "csetm ";
  var peg$c173 = "cset ";
  var peg$c174 = "csinc ";
  var peg$c175 = "csinv ";
  var peg$c176 = "csneg ";
  var peg$c177 = "crc32";
  var peg$c178 = "crc32c";
  var peg$c179 = "xtb";
  var peg$c180 = "xth";
  var peg$c181 = "xtw";
  var peg$c182 = "xtx";
  var peg$c183 = "[";
  var peg$c184 = "]";
  var peg$c185 = "!";
  var peg$c186 = "=";
  var peg$c187 = "sp";
  var peg$c188 = "sxtx";
  var peg$c189 = "P";
  var peg$c190 = "li";
  var peg$c191 = "keep";
  var peg$c192 = "strm";
  var peg$c193 = ",";
  var peg$c194 = "\n";
  var peg$c195 = "#";
  var peg$c196 = "/";
  var peg$c197 = ";";
  var peg$c198 = ":";
  var peg$c199 = ".word";
  var peg$c200 = ".half";
  var peg$c201 = ".byte";
  var peg$c202 = ".asciz";
  var peg$c203 = ".ascii";
  var peg$c204 = ".skip";
  var peg$c205 = ".float";
  var peg$c206 = ".quad";
  var peg$c207 = ".space";
  var peg$c208 = "xzr";
  var peg$c209 = "w";
  var peg$c210 = "d";
  var peg$c211 = "s";
  var peg$c212 = "-";
  var peg$c213 = "'";
  var peg$c214 = "0b";
  var peg$c215 = "0x";
  var peg$c216 = "lr";
  var peg$c217 = "msp";
  var peg$c218 = "psp";
  var peg$c219 = "spsr_el";
  var peg$c220 = "elr_el";
  var peg$c221 = "sp_el";
  var peg$c222 = "spsel";
  var peg$c223 = "daifset";
  var peg$c224 = "daifclr";
  var peg$c225 = "daif";
  var peg$c226 = "nzcv";
  var peg$c227 = "fpcr";
  var peg$c228 = "fpsr";
  var peg$c229 = "current_el";
  var peg$c230 = "\"";

  var peg$r0 = /^[BH]/i;
  var peg$r1 = /^[0-3]/;
  var peg$r2 = /^[RW]/i;
  var peg$r3 = /^[SU]/i;
  var peg$r4 = /^[W-X]/i;
  var peg$r5 = /^[W-X]/;
  var peg$r6 = /^[123]/;
  var peg$r7 = /^[ \t\xA0\uFEFF]/;
  var peg$r8 = /^[ \t\r\n\f]/;
  var peg$r9 = /^[a-zA-Z_]/;
  var peg$r10 = /^[a-zA-Z0-9_]/;
  var peg$r11 = /^[\/]/;
  var peg$r12 = /^[*]/;
  var peg$r13 = /^[^*]/;
  var peg$r14 = /^[^\/*]/;
  var peg$r15 = /^[^\n]/;
  var peg$r16 = /^[0-9]/;
  var peg$r17 = /^[01]/;
  var peg$r18 = /^[0-9a-fA-F]/;
  var peg$r19 = /^[012]/;

  var peg$e0 = peg$otherExpectation("instructions");
  var peg$e1 = peg$otherExpectation("instruction");
  var peg$e2 = peg$otherExpectation("global");
  var peg$e3 = peg$literalExpectation("global", true);
  var peg$e4 = peg$literalExpectation(".global", true);
  var peg$e5 = peg$literalExpectation(".globl", true);
  var peg$e6 = peg$literalExpectation(".section", true);
  var peg$e7 = peg$literalExpectation(".data", false);
  var peg$e8 = peg$literalExpectation(".text", false);
  var peg$e9 = peg$literalExpectation(".bss", false);
  var peg$e10 = peg$literalExpectation(".rodata", false);
  var peg$e11 = peg$literalExpectation(".init", false);
  var peg$e12 = peg$literalExpectation(".plt", false);
  var peg$e13 = peg$literalExpectation(".got", false);
  var peg$e14 = peg$literalExpectation(".debug", false);
  var peg$e15 = peg$literalExpectation(".reldata", false);
  var peg$e16 = peg$literalExpectation(".", false);
  var peg$e17 = peg$otherExpectation("jump");
  var peg$e18 = peg$literalExpectation("BLR ", true);
  var peg$e19 = peg$literalExpectation("BLT", true);
  var peg$e20 = peg$literalExpectation("B.LT", true);
  var peg$e21 = peg$literalExpectation("BLS", true);
  var peg$e22 = peg$literalExpectation("B.LS", true);
  var peg$e23 = peg$literalExpectation("BLO", true);
  var peg$e24 = peg$literalExpectation("B.LO", true);
  var peg$e25 = peg$literalExpectation("BLE", true);
  var peg$e26 = peg$literalExpectation("B.LE", true);
  var peg$e27 = peg$literalExpectation("BL ", true);
  var peg$e28 = peg$literalExpectation("BR ", true);
  var peg$e29 = peg$literalExpectation("B", true);
  var peg$e30 = peg$literalExpectation("CBNZ ", true);
  var peg$e31 = peg$literalExpectation("CBZ ", true);
  var peg$e32 = peg$literalExpectation("RET", true);
  var peg$e33 = peg$literalExpectation("TBNZ ", true);
  var peg$e34 = peg$literalExpectation("TBZ ", true);
  var peg$e35 = peg$literalExpectation("LT", true);
  var peg$e36 = peg$literalExpectation("LS", true);
  var peg$e37 = peg$literalExpectation("LE", true);
  var peg$e38 = peg$literalExpectation("EQ", true);
  var peg$e39 = peg$literalExpectation("NE", true);
  var peg$e40 = peg$literalExpectation("GT", true);
  var peg$e41 = peg$literalExpectation("CS", true);
  var peg$e42 = peg$literalExpectation("HS", true);
  var peg$e43 = peg$literalExpectation("CC", true);
  var peg$e44 = peg$literalExpectation("LO", true);
  var peg$e45 = peg$literalExpectation("MI", true);
  var peg$e46 = peg$literalExpectation("PL", true);
  var peg$e47 = peg$literalExpectation("VS", true);
  var peg$e48 = peg$literalExpectation("VC", true);
  var peg$e49 = peg$literalExpectation("HI", true);
  var peg$e50 = peg$literalExpectation("GE", true);
  var peg$e51 = peg$literalExpectation("AL", true);
  var peg$e52 = peg$otherExpectation("label");
  var peg$e53 = peg$otherExpectation("operate");
  var peg$e54 = peg$otherExpectation("arithmetic");
  var peg$e55 = peg$literalExpectation("ADD ", true);
  var peg$e56 = peg$literalExpectation("ADDS ", true);
  var peg$e57 = peg$literalExpectation("ADC ", true);
  var peg$e58 = peg$literalExpectation("ADCS ", true);
  var peg$e59 = peg$literalExpectation("ADRP ", true);
  var peg$e60 = peg$literalExpectation("ADR ", true);
  var peg$e61 = peg$literalExpectation("CMN ", true);
  var peg$e62 = peg$literalExpectation("CMP ", true);
  var peg$e63 = peg$literalExpectation("MADD ", true);
  var peg$e64 = peg$literalExpectation("MNEG ", true);
  var peg$e65 = peg$literalExpectation("MSUB ", true);
  var peg$e66 = peg$literalExpectation("MUL ", true);
  var peg$e67 = peg$literalExpectation("NEG ", true);
  var peg$e68 = peg$literalExpectation("NEGS ", true);
  var peg$e69 = peg$literalExpectation("NGC ", true);
  var peg$e70 = peg$literalExpectation("NGCS ", true);
  var peg$e71 = peg$literalExpectation("SBC ", true);
  var peg$e72 = peg$literalExpectation("SBCS ", true);
  var peg$e73 = peg$literalExpectation("SDIV ", true);
  var peg$e74 = peg$literalExpectation("SMADDL ", true);
  var peg$e75 = peg$literalExpectation("SMNEGL ", true);
  var peg$e76 = peg$literalExpectation("SMSUBL ", true);
  var peg$e77 = peg$literalExpectation("SMULH ", true);
  var peg$e78 = peg$literalExpectation("SMULL ", true);
  var peg$e79 = peg$literalExpectation("SUB ", true);
  var peg$e80 = peg$literalExpectation("SUBS ", true);
  var peg$e81 = peg$literalExpectation("UDIV ", true);
  var peg$e82 = peg$literalExpectation("UMADDL ", true);
  var peg$e83 = peg$literalExpectation("UMNEGL ", true);
  var peg$e84 = peg$literalExpectation("UMSUBL ", true);
  var peg$e85 = peg$literalExpectation("UMULH ", true);
  var peg$e86 = peg$literalExpectation("UMULL ", true);
  var peg$e87 = peg$otherExpectation("movement");
  var peg$e88 = peg$literalExpectation("FMOV ", true);
  var peg$e89 = peg$literalExpectation("MOVK ", true);
  var peg$e90 = peg$literalExpectation("LSL ", true);
  var peg$e91 = peg$literalExpectation("MOVN ", true);
  var peg$e92 = peg$literalExpectation("MOVZ ", true);
  var peg$e93 = peg$literalExpectation("MOV ", true);
  var peg$e94 = peg$otherExpectation("load_sotre");
  var peg$e95 = peg$literalExpectation("LDPSW ", true);
  var peg$e96 = peg$literalExpectation("LD", true);
  var peg$e97 = peg$literalExpectation("U", true);
  var peg$e98 = peg$literalExpectation("RSW", true);
  var peg$e99 = peg$literalExpectation(" ", false);
  var peg$e100 = peg$literalExpectation("RS", true);
  var peg$e101 = peg$classExpectation(["B", "H"], false, true);
  var peg$e102 = peg$literalExpectation("R", true);
  var peg$e103 = peg$literalExpectation("LDP ", true);
  var peg$e104 = peg$literalExpectation("A", true);
  var peg$e105 = peg$literalExpectation("XP ", true);
  var peg$e106 = peg$literalExpectation("X", true);
  var peg$e107 = peg$literalExpectation("LDNP ", true);
  var peg$e108 = peg$literalExpectation("LDTR", true);
  var peg$e109 = peg$literalExpectation("LDTRS", true);
  var peg$e110 = peg$literalExpectation("LDTRSW ", true);
  var peg$e111 = peg$literalExpectation("PRFM ", true);
  var peg$e112 = peg$literalExpectation("STP ", true);
  var peg$e113 = peg$literalExpectation("ST", true);
  var peg$e114 = peg$literalExpectation("STLR", true);
  var peg$e115 = peg$literalExpectation("L", true);
  var peg$e116 = peg$literalExpectation("XR", true);
  var peg$e117 = peg$literalExpectation("STNP ", true);
  var peg$e118 = peg$literalExpectation("STTR", true);
  var peg$e119 = peg$otherExpectation("logical");
  var peg$e120 = peg$literalExpectation("AND ", true);
  var peg$e121 = peg$literalExpectation("ANDS ", true);
  var peg$e122 = peg$literalExpectation("BIC ", true);
  var peg$e123 = peg$literalExpectation("BICS ", true);
  var peg$e124 = peg$literalExpectation("EON ", true);
  var peg$e125 = peg$literalExpectation("EOR ", true);
  var peg$e126 = peg$literalExpectation("ORR ", true);
  var peg$e127 = peg$literalExpectation("MVN ", true);
  var peg$e128 = peg$literalExpectation("ORN ", true);
  var peg$e129 = peg$literalExpectation("TST ", true);
  var peg$e130 = peg$otherExpectation("shift_rotate");
  var peg$e131 = peg$literalExpectation("LSR ", true);
  var peg$e132 = peg$literalExpectation("ASR ", true);
  var peg$e133 = peg$literalExpectation("ROR ", true);
  var peg$e134 = peg$otherExpectation("system_instructions");
  var peg$e135 = peg$literalExpectation("AT ", true);
  var peg$e136 = peg$literalExpectation("S1", true);
  var peg$e137 = peg$literalExpectation("2", false);
  var peg$e138 = peg$literalExpectation("E", true);
  var peg$e139 = peg$classExpectation([["0", "3"]], false, false);
  var peg$e140 = peg$classExpectation(["R", "W"], false, true);
  var peg$e141 = peg$literalExpectation("BRK ", true);
  var peg$e142 = peg$literalExpectation("CLREX", true);
  var peg$e143 = peg$literalExpectation("DMB ", true);
  var peg$e144 = peg$literalExpectation("DSB ", true);
  var peg$e145 = peg$literalExpectation("ERET", true);
  var peg$e146 = peg$literalExpectation("HVC ", true);
  var peg$e147 = peg$literalExpectation("ISB", true);
  var peg$e148 = peg$literalExpectation(" SY", true);
  var peg$e149 = peg$literalExpectation("MRS ", true);
  var peg$e150 = peg$literalExpectation("MSR ", true);
  var peg$e151 = peg$literalExpectation("NOP", true);
  var peg$e152 = peg$literalExpectation("SEV", true);
  var peg$e153 = peg$literalExpectation("SEVL", true);
  var peg$e154 = peg$literalExpectation("SMC ", true);
  var peg$e155 = peg$literalExpectation("SVC ", true);
  var peg$e156 = peg$literalExpectation("WFE", true);
  var peg$e157 = peg$literalExpectation("WFI", true);
  var peg$e158 = peg$literalExpectation("YIELD", true);
  var peg$e159 = peg$otherExpectation("barrier_option");
  var peg$e160 = peg$literalExpectation("OSH", true);
  var peg$e161 = peg$literalExpectation("NSH", true);
  var peg$e162 = peg$literalExpectation("ISH", true);
  var peg$e163 = peg$literalExpectation("SY", true);
  var peg$e164 = peg$otherExpectation("bit_manipulacion");
  var peg$e165 = peg$literalExpectation("BFXIL ", true);
  var peg$e166 = peg$literalExpectation("BFI ", true);
  var peg$e167 = peg$literalExpectation("CLS ", true);
  var peg$e168 = peg$literalExpectation("CLZ ", true);
  var peg$e169 = peg$literalExpectation("EXTR ", true);
  var peg$e170 = peg$literalExpectation("RBIT ", true);
  var peg$e171 = peg$literalExpectation("REV ", true);
  var peg$e172 = peg$literalExpectation("REV16 ", true);
  var peg$e173 = peg$literalExpectation("REV32 ", true);
  var peg$e174 = peg$classExpectation(["S", "U"], false, true);
  var peg$e175 = peg$literalExpectation("BFIZ ", true);
  var peg$e176 = peg$literalExpectation("BFX ", true);
  var peg$e177 = peg$literalExpectation("XT", true);
  var peg$e178 = peg$literalExpectation("SXTW ", true);
  var peg$e179 = peg$otherExpectation("atomic");
  var peg$e180 = peg$literalExpectation("CAS", true);
  var peg$e181 = peg$literalExpectation("P", true);
  var peg$e182 = peg$literalExpectation("LDao", true);
  var peg$e183 = peg$literalExpectation("STao", true);
  var peg$e184 = peg$literalExpectation("SWP", true);
  var peg$e185 = peg$otherExpectation("conditional");
  var peg$e186 = peg$literalExpectation("CCMN ", true);
  var peg$e187 = peg$literalExpectation("CCMP ", true);
  var peg$e188 = peg$literalExpectation("CINC ", true);
  var peg$e189 = peg$literalExpectation("CINV ", true);
  var peg$e190 = peg$literalExpectation("CNEG ", true);
  var peg$e191 = peg$literalExpectation("CSEL ", true);
  var peg$e192 = peg$literalExpectation("CSETM ", true);
  var peg$e193 = peg$literalExpectation("CSET ", true);
  var peg$e194 = peg$literalExpectation("CSINC ", true);
  var peg$e195 = peg$literalExpectation("CSINV ", true);
  var peg$e196 = peg$literalExpectation("CSNEG ", true);
  var peg$e197 = peg$otherExpectation("checksum_instructions");
  var peg$e198 = peg$literalExpectation("CRC32", true);
  var peg$e199 = peg$classExpectation([["W", "X"]], false, true);
  var peg$e200 = peg$literalExpectation("CRC32C", true);
  var peg$e201 = peg$classExpectation([["W", "X"]], false, false);
  var peg$e202 = peg$otherExpectation("simple_operand");
  var peg$e203 = peg$otherExpectation("operands");
  var peg$e204 = peg$literalExpectation("XTB", true);
  var peg$e205 = peg$literalExpectation("XTH", true);
  var peg$e206 = peg$literalExpectation("XTW", true);
  var peg$e207 = peg$literalExpectation("XTX", true);
  var peg$e208 = peg$otherExpectation("memory_operand");
  var peg$e209 = peg$literalExpectation("[", false);
  var peg$e210 = peg$literalExpectation("]", false);
  var peg$e211 = peg$literalExpectation("!", false);
  var peg$e212 = peg$literalExpectation("=", false);
  var peg$e213 = peg$literalExpectation("SP", true);
  var peg$e214 = peg$otherExpectation("adderssing");
  var peg$e215 = peg$literalExpectation("SXTX", true);
  var peg$e216 = peg$otherExpectation("prfop");
  var peg$e217 = peg$literalExpectation("P", false);
  var peg$e218 = peg$literalExpectation("LI", true);
  var peg$e219 = peg$classExpectation(["1", "2", "3"], false, false);
  var peg$e220 = peg$literalExpectation("KEEP", true);
  var peg$e221 = peg$literalExpectation("STRM", true);
  var peg$e222 = peg$otherExpectation("comma");
  var peg$e223 = peg$literalExpectation(",", false);
  var peg$e224 = peg$otherExpectation("newLine");
  var peg$e225 = peg$literalExpectation("\n", false);
  var peg$e226 = peg$otherExpectation("whitespace");
  var peg$e227 = peg$classExpectation([" ", "\t", "\xA0", "\uFEFF"], false, false);
  var peg$e228 = peg$otherExpectation("unused");
  var peg$e229 = peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false);
  var peg$e230 = peg$otherExpectation("hash");
  var peg$e231 = peg$literalExpectation("#", false);
  var peg$e232 = peg$otherExpectation("id");
  var peg$e233 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e234 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e235 = peg$otherExpectation("slash");
  var peg$e236 = peg$literalExpectation("/", false);
  var peg$e237 = peg$otherExpectation("semicolon");
  var peg$e238 = peg$literalExpectation(";", false);
  var peg$e239 = peg$otherExpectation("comment");
  var peg$e240 = peg$classExpectation(["/"], false, false);
  var peg$e241 = peg$classExpectation(["*"], false, false);
  var peg$e242 = peg$classExpectation(["*"], true, false);
  var peg$e243 = peg$classExpectation(["/", "*"], true, false);
  var peg$e244 = peg$classExpectation(["\n"], true, false);
  var peg$e245 = peg$otherExpectation("colon");
  var peg$e246 = peg$literalExpectation(":", false);
  var peg$e247 = peg$literalExpectation(".word", false);
  var peg$e248 = peg$literalExpectation(".half", false);
  var peg$e249 = peg$literalExpectation(".byte", false);
  var peg$e250 = peg$literalExpectation(".asciz", false);
  var peg$e251 = peg$literalExpectation(".ascii", false);
  var peg$e252 = peg$literalExpectation(".skip", false);
  var peg$e253 = peg$literalExpectation(".float", false);
  var peg$e254 = peg$literalExpectation(".quad", false);
  var peg$e255 = peg$literalExpectation(".space", false);
  var peg$e256 = peg$otherExpectation("variables");
  var peg$e257 = peg$otherExpectation("variable");
  var peg$e258 = peg$otherExpectation("numericalRegister");
  var peg$e259 = peg$literalExpectation("XZR", true);
  var peg$e260 = peg$otherExpectation("generalPurposeRegister");
  var peg$e261 = peg$literalExpectation("x", false);
  var peg$e262 = peg$literalExpectation("w", false);
  var peg$e263 = peg$otherExpectation("floatingPointRegister");
  var peg$e264 = peg$literalExpectation("d", false);
  var peg$e265 = peg$literalExpectation("s", false);
  var peg$e266 = peg$otherExpectation("number");
  var peg$e267 = peg$otherExpectation("integer");
  var peg$e268 = peg$literalExpectation("-", false);
  var peg$e269 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e270 = peg$otherExpectation("real");
  var peg$e271 = peg$otherExpectation("char");
  var peg$e272 = peg$literalExpectation("'", false);
  var peg$e273 = peg$anyExpectation();
  var peg$e274 = peg$otherExpectation("inmediate");
  var peg$e275 = peg$literalExpectation("0b", false);
  var peg$e276 = peg$classExpectation(["0", "1"], false, false);
  var peg$e277 = peg$literalExpectation("0x", false);
  var peg$e278 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e279 = peg$otherExpectation("special_prupose_register");
  var peg$e280 = peg$literalExpectation("LR", true);
  var peg$e281 = peg$literalExpectation("MSP", true);
  var peg$e282 = peg$literalExpectation("PSP", true);
  var peg$e283 = peg$literalExpectation("SPSR_EL", true);
  var peg$e284 = peg$literalExpectation("ELR_EL", true);
  var peg$e285 = peg$literalExpectation("SP_EL", true);
  var peg$e286 = peg$classExpectation(["0", "1", "2"], false, false);
  var peg$e287 = peg$literalExpectation("SPSel", true);
  var peg$e288 = peg$literalExpectation("DAIFSet", true);
  var peg$e289 = peg$literalExpectation("DAIFClr", true);
  var peg$e290 = peg$literalExpectation("DAIF", true);
  var peg$e291 = peg$literalExpectation("NZCV", true);
  var peg$e292 = peg$literalExpectation("FPCR", true);
  var peg$e293 = peg$literalExpectation("FPSR", true);
  var peg$e294 = peg$literalExpectation("CURRENT_EL", true);
  var peg$e295 = peg$otherExpectation("string");
  var peg$e296 = peg$literalExpectation("\"", false);

  var peg$f0 = function(ins) {return new Root(ins); console.log("CONTENIDO INS") ;console.log(ins);};
  var peg$f1 = function(ins) {return ins};
  var peg$f2 = function(glob) { return glob};
  var peg$f3 = function(vr) { return [...vr]};
  var peg$f4 = function(lbl) { return lbl};
  var peg$f5 = function(op) {return op};
  var peg$f6 = function(j) {return j};
  var peg$f7 = function(chk) {return chk};
  var peg$f8 = function(sec) { return sec};
  var peg$f9 = function() { return};
  var peg$f10 = function(text, id) { 
        const loc = location()?.start;
        return new SystemCall(loc?.line, loc?.column, text, id)
    };
  var peg$f11 = function(sec) {
        const loc = location()?.start;
        return new Section(loc?.line, loc?.column, sec)
    };
  var peg$f12 = function(sec) { 
        const loc = location()?.start;
        return new Section(loc?.line, loc?.column, sec)
        };
  var peg$f13 = function() {return "data";};
  var peg$f14 = function() {return "text";};
  var peg$f15 = function() {return "bss";};
  var peg$f16 = function() {return "rodate";};
  var peg$f17 = function() {return "init";};
  var peg$f18 = function() {return "plt";};
  var peg$f19 = function() {return "got";};
  var peg$f20 = function() {return "debug";};
  var peg$f21 = function() {return "reldata";};
  var peg$f22 = function(id) {return id;};
  var peg$f23 = function(j, rn) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, null, null, 4)
    };
  var peg$f24 = function(j, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, ids, null, null, 5)
    };
  var peg$f25 = function(j, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, ids, null, null, 5)
    };
  var peg$f26 = function(j, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, ids, null, null, 5)
    };
  var peg$f27 = function(j, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, ids, null, null, 5)
    };
  var peg$f28 = function(j, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, ids, null, null, 5)
    };
  var peg$f29 = function(j, rn) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, null, null, 4)
    };
  var peg$f30 = function(j, ext, ids) {
        let b = j
        if(ext) b += ext 
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, b, ids, null, null, 5)
    };
  var peg$f31 = function(j, rn, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, null, ids, 4)
    };
  var peg$f32 = function(j, rn, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, null, ids, 4)
    };
  var peg$f33 = function(j, rn) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j,rn,null, null, 1)
    };
  var peg$f34 = function(j, rn, inm, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, inm, ids, 4)
    };
  var peg$f35 = function(j, rn, inm, ids) {
        const loc = location()?.start;
        return new Jump(loc?.line, loc?.column, j, rn, inm, ids, 4)
    
    };
  var peg$f36 = function() {return "LT"};
  var peg$f37 = function() {return "LS"};
  var peg$f38 = function() {return "LE"};
  var peg$f39 = function() {return "EQ"};
  var peg$f40 = function() {return "NE"};
  var peg$f41 = function() {return "GT"};
  var peg$f42 = function() {return "CS"};
  var peg$f43 = function() {return "HS"};
  var peg$f44 = function() {return "CC"};
  var peg$f45 = function() {return "LO"};
  var peg$f46 = function() {return "MI"};
  var peg$f47 = function() {return "PL"};
  var peg$f48 = function() {return "VS"};
  var peg$f49 = function() {return "VC"};
  var peg$f50 = function() {return "HI"};
  var peg$f51 = function() {return "GE"};
  var peg$f52 = function() {return "LE"};
  var peg$f53 = function() {return "AL"};
  var peg$f54 = function(label) {
        const loc = location()?.start;
        return new Label(loc?.line, loc?.column, label)
    };
  var peg$f55 = function(arith) {return arith};
  var peg$f56 = function(op, rd, rn, op2) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, op2, null, rd, 1)
    };
  var peg$f57 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 1)
    };
  var peg$f58 = function(op, xd, rel) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rel, null, null, xd, 2)
    };
  var peg$f59 = function(op, xd, rel) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rel, null, null, xd, 2)
    };
  var peg$f60 = function(op, rd, op2) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rd, op2, null, null, 1)
    };
  var peg$f61 = function(op, rd, op2) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rd, op2, null, null, 1)
    };
  var peg$f62 = function(op, rd, rn, rm, ra) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, ra, rd, 4)
    };
  var peg$f63 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 4)
    };
  var peg$f64 = function(op, rd, rn, rm, ra) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, ra, rd, 4)
    };
  var peg$f65 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 4)
    };
  var peg$f66 = function(op, rd, op2) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, op2, null, null, rd, 3)
    };
  var peg$f67 = function(op, rd, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rm, null, null, rd, 4)
    };
  var peg$f68 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 4)
    };
  var peg$f69 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 4)
    };
  var peg$f70 = function(op, rd, wn, wm, xa) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, xa, rd, 4)
    };
  var peg$f71 = function(op, rd, wn, wm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, null, rd, 4)
    };
  var peg$f72 = function(op, rd, wn, wm, xa) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, xa, rd, 4)
    };
  var peg$f73 = function(op, xd, xn, xm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, xn, xm, null, xd, 4)
    };
  var peg$f74 = function(op, xd, xn, xm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, xn, xm, null, xd, 4)
    };
  var peg$f75 = function(op, rd, rn, op2) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, op2, null, rd, 1)
    };
  var peg$f76 = function(op, rd, rn, rm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, rn, rm, null, rd, 4)
    };
  var peg$f77 = function(op, xd, wn, wm, xa) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, xa, xd, 4)
    };
  var peg$f78 = function(op, xd, wn, wm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, null, xd, 4)
    };
  var peg$f79 = function(op, xd, wn, wm, xa) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, xa, xd, 4)
    };
  var peg$f80 = function(op, xd, wn, wm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, null, xd, 4)
    };
  var peg$f81 = function(op, xd, wn, wm) {
        const loc = location()?.start;
        return new Operation(loc?.line, loc?.column, op, wn, wm, null, xd, 4)
    };
  var peg$f82 = function(mov, rd, i) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, i,null)
    };
  var peg$f83 = function(mov, rd, inm, sh) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, inm, sh === undefined ? null : new ShiftRotate(loc?.line, loc?.column, "LSL", null, inm, sh[3],1))
    };
  var peg$f84 = function(mov, rd, inm, sh) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, inm, sh === undefined ? null : new ShiftRotate(loc?.line, loc?.column, "LSL", null, inm, sh[3],1))
    };
  var peg$f85 = function(mov, rd, inm, sh) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, inm, sh === undefined ? null : new ShiftRotate(loc?.line, loc?.column, "LSL", null, inm, sh[3],1))
    };
  var peg$f86 = function(mov, rd, i) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, i,null)
    
    };
  var peg$f87 = function(mov, rd, i) {
        const loc = location()?.start;
        return new Movment(loc?.line, loc?.column, mov, rd, i,null)
    
    };
  var peg$f88 = function(ls, xt, xt2, add) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, xt, xt2, null, add)
    };
  var peg$f89 = function(b, rt, add) {
        let ls = "LD"
        if (b != null && b!= undefined) {
            ls += "U"
        }
        ls += "RSW"
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null, null, add)
    };
  var peg$f90 = function(a, b, rt, add) {
        let ls = "LD"
        if (a != null && a!= undefined) {
            ls += "U"
        }
        ls += "RS"
        if (b != null && b!= undefined) {
            ls += b
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null, null, add)
    };
  var peg$f91 = function(a, b, rt, add) {
        let ls = "LD"
        if (a != null && a!= undefined) {
            ls += "U"
        }
        ls += "R"
        if (b != null && b!= undefined) {
            ls += b
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null, null, add)
    };
  var peg$f92 = function(ls, rt, rt2, add) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, rt2, null, add)
    };
  var peg$f93 = function(a, rt, rt2, xn) {
        let ls = "LD"
        if (a != null && a!= undefined) {
            ls += "A"
        }
        ls += "XP"
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, rt2,null,  xn)
    };
  var peg$f94 = function(a, b, c, rt, xn) {
        let ls = "LD"
        if (a != null && a!= undefined) {
            ls += "A"
        }
        if (b != null && b!= undefined) {
            ls += "X"
        }
        ls += "R"
        if (c != null && c!= undefined) {
            ls += c
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null,null,  xn)
    };
  var peg$f95 = function(ls, rt, rt2, xn) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, "LDNP", rt, rt2,null,  xn)
    };
  var peg$f96 = function(a, rt, xn) {
        let ls = "LDTR"
        if (a != null && a!= undefined) {
            ls += a
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null,null,  xn)
    };
  var peg$f97 = function(a, rt, xn) {
        let ls = "LDTRS"
        if (a != null && a!= undefined) {
            ls += a
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null,null,  xn)
    };
  var peg$f98 = function(ls, xt, xn) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, "LDTRSW", xt, null,null,  xn)
    };
  var peg$f99 = function(ls, p, add) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, "PRFM", p, null, add)
    };
  var peg$f100 = function(ls, rt, rt2, add) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, "STP", rt, rt2, null, add)
    };
  var peg$f101 = function(a, b, rt, add) {
        let ls = "ST"
        if (a != null && a!= undefined) {
            ls += "U"
        }
        ls += "R"
        if (b != null && b!= undefined) {
            ls += b
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null, null, add)
    };
  var peg$f102 = function(a, rt, xn) {
        let ls = "STLR"
        if (a != null && a!= undefined) {
            ls += a
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null,null,  xn)
    };
  var peg$f103 = function(a, wd, rt, rt2, xn) {
        let ls = "ST"
        if (a != null && a!= undefined) {
            ls += "L"
        }
        ls += "XP"
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, wd, rt, rt2,  xn)
    };
  var peg$f104 = function(a, b, wd, rt, xn) {
        let ls = "ST"
        if (a != null && a!= undefined) {
            ls += "L"
        }
        ls += "XR"
        if (b != null && b!= undefined) {
            ls += b
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, wd, rt, null,  xn)
    };
  var peg$f105 = function(ls, rt, rt2, xn) {
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, "STNP", rt, rt2,null,  xn)
    };
  var peg$f106 = function(a, rt, xn) {
        let ls = "STTR"
        if (a != null && a!= undefined) {
            ls += a
        }
        const loc = location()?.start;
        return new LoadStore(loc?.line, loc?.column, ls, rt, null,null,  xn)
    };
  var peg$f107 = function(log, rd, rn, op2) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, op2)
    };
  var peg$f108 = function(log, rd, rn, op2) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, op2)
    };
  var peg$f109 = function(log, rd, rn, op2) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, op2)
    };
  var peg$f110 = function(log, rd, rn, rm) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, rm)
    };
  var peg$f111 = function(log, rd, rn, rm) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, rm)
    };
  var peg$f112 = function(log, rd, op2) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, null, op2 )
    };
  var peg$f113 = function(log, rd, rn, rm) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, rn, rm)
    };
  var peg$f114 = function(log, rd, op2) {
        const loc = location()?.start;
        return new Logical(loc?.line, loc?.column, log, rd, null, op2)
    
    };
  var peg$f115 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column, sh, rd, rn, rm, 1)
    };
  var peg$f116 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column, sh, rd, rn, rm, 2)
    };
  var peg$f117 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 1)
    };
  var peg$f118 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 2)
    };
  var peg$f119 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 1)
    };
  var peg$f120 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 2)
    };
  var peg$f121 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 1)
    
    };
  var peg$f122 = function(sh, rd, rn, rm) {
        const loc = location()?.start;
        return new ShiftRotate(loc?.line, loc?.column,sh, rd, rn, rm, 2)
    
    };
  var peg$f123 = function(a, b, c, rn) {
        let sys = "AT"
        let lvl = "S1"
        if (a != null && a!= undefined) {
            lvl += a
        }
        lvl += "E"
        if (b != null && b!= undefined) {
            lvl += b
        }
        if (c != null && c!= undefined) {
            lvl += c
        }
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, lvl, rn, 1)
    };
  var peg$f124 = function(sys, inm) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, inm, null, 2)
    };
  var peg$f125 = function(sys, inm) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, inm, null, 2)
    };
  var peg$f126 = function(sys, b_op) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, b_op.option, null, 3)
    };
  var peg$f127 = function(sys, b_op) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys,  b_op.option, null, 3)
    };
  var peg$f128 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f129 = function(sys, inm) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, inm, null, 2)
    };
  var peg$f130 = function(sys, op) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, op, 0)
    };
  var peg$f131 = function(sys, xt, field) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, xt, field, 4)
    };
  var peg$f132 = function(sys, field, xt) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, field, xt, 5)
    };
  var peg$f133 = function(sys, field, xt) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, field, xt, 6)
    };
  var peg$f134 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f135 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f136 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f137 = function(sys, inm) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, inm, null, 2)
    };
  var peg$f138 = function(sys, inm) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, inm, null, 2)
    };
  var peg$f139 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f140 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f141 = function(sys) {
        const loc = location()?.start;
        return new System(loc?.line, loc?.column, sys, null, null, 0)
    };
  var peg$f142 = function(op) {
        return {
            option: "OSH",
            operation: op === undefined ? null : op[1]
        }
    };
  var peg$f143 = function() {
        return {
            option: "NSH",
            operation: op === undefined ? null : op[1]
        }
    };
  var peg$f144 = function() {
        return {
            option: "ISH",
            operation: op === undefined ? null : op[1]
        }
    };
  var peg$f145 = function() {
        return {
            option: "LD",
            operation: null
        }
    };
  var peg$f146 = function() {
        return {
            option: "ST",
            operation: null
        }
    };
  var peg$f147 = function() {
        return {
            option: "SY",
            operation: null
        }
    };
  var peg$f148 = function(b, rd, rn, lsb, width) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, lsb, width)
    };
  var peg$f149 = function(b, rd, rn, lsb, width) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, lsb, width)
    };
  var peg$f150 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f151 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f152 = function(b, rd, rn, rm, lsb) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, rm, lsb)
    };
  var peg$f153 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f154 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f155 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f156 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f157 = function(a, rd, rn, lsb, width) {
        let b = "BFIZ"
        if(a != null && a != undefined) {
            b = a + "BFIZ"
        } else {
            b = "BFIZ"
        }
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, lsb, width)
    };
  var peg$f158 = function(a, rd, rn, lsb, width) {
        let b = "BFX"
        if(a != null && a != undefined) {
            b = a + "BFX"
        } else {
            b = "BFX"
        }
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, lsb, width)
    };
  var peg$f159 = function(a, c, rd, rn) {
        let b = "XT"
        if(a != null && a != undefined) {
            b = a + "XT"
        } else {
            b = "XT"
        }
        if(c != null && c != undefined) {
            b += c
        }
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f160 = function(b, rd, rn) {
        const loc = location()?.start;
        return new BitManipulation(loc?.line, loc?.column, b, rd, rn, null, null)
    };
  var peg$f161 = function(a, b, c, rs, rt, xn) {
        let at = "CAS"
        if(a != null && a != undefined) {
            at += a
        }
        if(b != null && b != undefined) {
            at += b
        }
        if(c != null && c != undefined) {
            at += c
        }
        const loc = location()?.start;
        return new Atomic(loc?.line, loc?.column, at, rs, rt, null, null, xn)
    };
  var peg$f162 = function(a, b, rs, rs2, rt, rt2, xn) {
        let at = "CAS"
        if(a != null && a != undefined) {
            at += a
        }
        if(b != null && b != undefined) {
            at += b
        }
        at += "P"
        const loc = location()?.start;
        return new Atomic(loc?.line, loc?.column, at, rs, rs2, rt, rt2, xn)
    };
  var peg$f163 = function(a, b, c, rs, rt, xn) {
        let at = "LDao"
        if(a != null && a != undefined) {
            at += a
        }
        if(b != null && b != undefined) {
            at += b
        }
        if(c != null && c != undefined) {
            at += c
        }
        const loc = location()?.start;
        return new Atomic(loc?.line, loc?.column, at, rs, rt, null, null, xn)
    };
  var peg$f164 = function(a, b, c, rs, xn) {
        let at = "STao"
        if(a != null && a != undefined) {
            at += a
        }
        if(b != null && b != undefined) {
            at += b
        }
        if(c != null && c != undefined) {
            at += c
        }
        const loc = location()?.start;
        return new Atomic(loc?.line, loc?.column, at, rs, null, null, null, xn)
    };
  var peg$f165 = function(a, b, c, rs, rt, xn) {
        let at = "SWP"
        if(a != null && a != undefined) {
            at += a
        }
        if(b != null && b != undefined) {
            at += b
        }
        if(c != null && c != undefined) {
            at += c
        }
        const loc = location()?.start;
        return new Atomic(loc?.line, loc?.column, at, rs, rt, null, null, xn)
    
    };
  var peg$f166 = function(con, rn, op2, inm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rn, op2, inm, cond, 1)
    };
  var peg$f167 = function(con, rn, op2, inm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rn, op2, inm, cond, 2)
    };
  var peg$f168 = function(con, rn, op2, inm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rn, op2, inm, cond, 1)
    };
  var peg$f169 = function(con, rn, op2, inm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rn, op2, inm, cond, 0)
    };
  var peg$f170 = function(con, rd, rn, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, null, cond, 0)
    };
  var peg$f171 = function(con, rd, rn, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, null, cond, 0)
    };
  var peg$f172 = function(con, rd, rn, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, null, cond, 0)
    };
  var peg$f173 = function(con, rd, rn, rm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, rm, cond, 3)
    };
  var peg$f174 = function(con, rd, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, null, null, cond, 0)
    };
  var peg$f175 = function(con, rd, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, null, null, cond, 0)
    };
  var peg$f176 = function(con, rd, rn, rm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, rm, cond, 3)
    };
  var peg$f177 = function(con, rd, rn, rm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, rm, cond, 3)
    };
  var peg$f178 = function(con, rd, rn, rm, cond) {
        const loc = location()?.start;
        return new Conditional(loc?.line, loc?.column, con, rd, rn, rm, cond, 3)
    };
  var peg$f179 = function(a, rd, rn, rm) {
        let ch = "CRC32"
        if(a != null && a != undefined) {
            ch += a
        }
        const loc = location()?.start;
        return new CheckSum(loc?.line, loc?.column, ch, rd, rn, rm)
    };
  var peg$f180 = function(a, rd, rn, rm) {
        let ch = "CRC32"
        if(a != null && a != undefined) {
            ch += a
        }
        const loc = location()?.start;
        return new CheckSum(loc?.line, loc?.column, ch, rd, rn, rm)
    };
  var peg$f181 = function(a, rd, rn, rm) {
        let ch = "CRC32C"
        if(a != null && a != undefined) {
            let b = a.replace(",", "")
            ch += b
        }
        const loc = location()?.start;
        return new CheckSum(loc?.line, loc?.column, ch, rd, rn, rm)
    };
  var peg$f182 = function(reg, op) {
        return reg
    };
  var peg$f183 = function(inm) { return inm;};
  var peg$f184 = function(op, inm) {return op + " " + inm};
  var peg$f185 = function(a, b, c) {return a + b + (c ? c : "")};
  var peg$f186 = function(addr) {
        let loc = location()?.start;
        return new AccessMemory(loc?.line, loc?.column, addr[0], addr[1], addr[2], addr[3])
    };
  var peg$f187 = function(addr, inm) {
        let offset=null;
        let type = false;
        if(addr[1] != null && addr[1] != undefined){
            offset = addr[1];
            type = false;
        }else{
            if(inm != undefined && inm != null){
                offset = inm[1];
                type = true;
            }
        }
        let loc = location()?.start;
        return new AccessMemory(loc?.line, loc?.column, addr[0], offset, null, null, null, type)
    };
  var peg$f188 = function(addr) {
        let loc = location()?.start;
        return new AccessMemory(loc?.line, loc?.column, addr[0], addr[1], null, null,"!",addr[1]=== null ? true : fals)
    };
  var peg$f189 = function(id) {
        let loc = location()?.start;
        return new AccessMemory(loc?.line, loc?.column, id, null, null,null, "=")
    };
  var peg$f190 = function(id) {
        let loc = location()?.start;
        return new AccessMemory(loc?.line, loc?.column, id, null, null)
    };
  var peg$f191 = function(xn, inm) {
        return [xn, inm]
    };
  var peg$f192 = function(xn) {   
        return [xn, null]
    };
  var peg$f193 = function(inm) {
        return [["SP",64], inm]
    };
  var peg$f194 = function() {
        return [["SP",64], null]
    };
  var peg$f195 = function(xn, wm, op, inm) {
        let loc = location()?.start;
        let temp = new BitManipulation(loc?.line, loc?.column, op, xn, wm, null, null)
        return [xn, wm, temp , inm]
    };
  var peg$f196 = function(xn, wm, op, inm) {
        let loc = location()?.start;
        let temp = new BitManipulation(loc?.line, loc?.column, op, xn, wm, null, null)
        return [xn, wm, temp, inm]
    };
  var peg$f197 = function(xn, xm, op, inm) {
        let loc = location()?.start;
        let temp = new ShiftRotate(loc?.line, loc?.column, op, xn, xm, inm)
        return [xn, xm, temp, inm]
    };
  var peg$f198 = function(a, b, c) {
        let ins = "P";
        if(a != null && a != undefined){
            ins += a;
        }
        ins += "L";
        if(b != null && b != undefined){
            ins += b;
        }
        if(c != null && c != undefined){
            ins += c;
        }
        return ins;
    };
  var peg$f199 = function() {return };
  var peg$f200 = function() {return };
  var peg$f201 = function() {return null;};
  var peg$f202 = function() { return text();};
  var peg$f203 = function() {return null;};
  var peg$f204 = function() {return null;};
  var peg$f205 = function() {return null;};
  var peg$f206 = function() {return "word"};
  var peg$f207 = function() {return "half"};
  var peg$f208 = function() {return "byte"};
  var peg$f209 = function() {return "asciz"};
  var peg$f210 = function() {return "ascii"};
  var peg$f211 = function() {return "skip"};
  var peg$f212 = function() {return "float"};
  var peg$f213 = function() {return "quad"};
  var peg$f214 = function() {return "space"};
  var peg$f215 = function(vari) {return vari};
  var peg$f216 = function(nom, tipo, val) {
        const loc = location()?.start;
        return new Variable(loc?.line, loc?.column, tipo, nom, val)
    
    };
  var peg$f217 = function() {
        let loc = location()?.start;
        return new Register(loc?.line, loc?.column, "XZR");
    };
  var peg$f218 = function(x) {
        let loc = location()?.start;
        return new Register(loc?.line, loc?.column, x[0],x[1]);
    };
  var peg$f219 = function(d) {
        let loc = location()?.start;
        return new Register(loc?.line, loc?.column, d,64);
    };
  var peg$f220 = function() {
        let loc = location()?.start;
        return new Register(loc?.line, loc?.column, "SP",64);
    
    };
  var peg$f221 = function(int) { return ["x"+int, 64] ;};
  var peg$f222 = function(int) { return ["w"+int, 32] ;};
  var peg$f223 = function(int) { return "d" + int };
  var peg$f224 = function(int) { return "s" + int };
  var peg$f225 = function(float) {return float;};
  var peg$f226 = function(int) {return int;};
  var peg$f227 = function() {return parseInt(text());};
  var peg$f228 = function() {return parseFloat(text());};
  var peg$f229 = function() { return text().slice(1, -1);};
  var peg$f230 = function(base, binary) {
        let binario = binary.join("");
        let numero = base + binario;
        let loc = location()?.start;
        return new Inmediate(loc?.line, loc?.column, numero,Type.BIN);
        // return numero;
    };
  var peg$f231 = function(base, number) {
        let hexa = number.join("");
        let numero = base + hexa;
        let loc = location()?.start;
        return new Inmediate(loc?.line, loc?.column, numero,Type.HEX);
        // return numero;
    };
  var peg$f232 = function(number) { 
        let cadena = number.join("");
        cadena = cadena.replace(/,/g, "");
        let loc = location()?.start;
        return new Inmediate(loc?.line, loc?.column, cadena,Type.INT);
        // return cadena;
        };
  var peg$f233 = function(char) {
        let cadena = char.join("");
        cadena = cadena.replace(/,/g, "");
        let loc = location()?.start;
        return new Inmediate(loc?.line, loc?.column, cadena,Type.CHAR);
        // return cadena;
    };
  var peg$f234 = function() {return "LR";};
  var peg$f235 = function() {return "MSP";};
  var peg$f236 = function() {return "PSP";};
  var peg$f237 = function(a, b) {
        let ins = "SPSR_EL";
    
        if(b != null && b != undefined){
            ins += b;
        }
        return ins;
        };
  var peg$f238 = function(b) {
        let ins = "ELR_EL";

        if(b != null && b != undefined){
            ins += b;
        }
        return ins;
        
    };
  var peg$f239 = function(b) {
        let ins = "SP_EL";

        if(b != null && b != undefined){
            ins += b;
        }
        return ins;
    };
  var peg$f240 = function() {return "SPSel";};
  var peg$f241 = function() {return "DAIFSet";};
  var peg$f242 = function() {return "DAIFClr";};
  var peg$f243 = function() {return "DAIF";};
  var peg$f244 = function() {return "NZCV";};
  var peg$f245 = function() {return "FPCR";};
  var peg$f246 = function() {return "FPSR";};
  var peg$f247 = function() {return "CURRENT_EL"; };
  var peg$f248 = function() { 
        let value =  text().slice(1, -1);
        let loc = location()?.start;
        return new Inmediate(loc?.line, loc?.column, value,Type.STRING);
    };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseinit() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseinstructions();
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseinstructions() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseinstruction();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseinstruction();
    }
    peg$savedPos = s0;
    s1 = peg$f1(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e0); }

    return s0;
  }

  function peg$parseinstruction() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseGLOBAL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse__();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse__();
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsevariables();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse__();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse__();
        }
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parselabel();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse__();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse__();
          }
          peg$savedPos = s0;
          s0 = peg$f4(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parseoperate();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse__();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse__();
            }
            peg$savedPos = s0;
            s0 = peg$f5(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parsejump();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse__();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse__();
              }
              peg$savedPos = s0;
              s0 = peg$f6(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              s2 = peg$parsechecksum_instructions();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parse__();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parse__();
                }
                peg$savedPos = s0;
                s0 = peg$f7(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                s2 = peg$parseinitSection();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parse__();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parse__();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f8(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  s2 = peg$parsecomment();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parse__();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parse__();
                    }
                    peg$savedPos = s0;
                    s0 = peg$f9();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseGLOBAL() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c0) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 === peg$FAILED) {
      s2 = input.substr(peg$currPos, 7);
      if (s2.toLowerCase() === peg$c1) {
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s2 === peg$FAILED) {
        s2 = input.substr(peg$currPos, 6);
        if (s2.toLowerCase() === peg$c2) {
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseid();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseinitSection() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c3) {
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsesections();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesections();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f12(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsesections() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s1 = peg$c6;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f15();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c7) {
            s1 = peg$c7;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f16();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c8) {
              s1 = peg$c8;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f17();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c9) {
                s1 = peg$c9;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f18();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c10) {
                  s1 = peg$c10;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f19();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c11) {
                    s1 = peg$c11;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f20();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c12) {
                      s1 = peg$c12;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f21();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 46) {
                        s1 = peg$c13;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseid();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f22(s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsejump() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c14) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c15) {
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c16) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseid();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 3);
        if (s1.toLowerCase() === peg$c17) {
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c18) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseid();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 3);
          if (s1.toLowerCase() === peg$c19) {
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c20) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseid();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f26(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 3);
            if (s1.toLowerCase() === peg$c21) {
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c22) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e26); }
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseid();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c23) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseid();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28(s1, s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c24) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e28); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f29(s1, s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.charAt(peg$currPos);
                  if (s1.toLowerCase() === peg$c25) {
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e29); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s2 = peg$c13;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e16); }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s3 = peg$parsecondicional_codes();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = peg$parse_();
                    s5 = peg$parseid();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f30(s1, s3, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 5);
                    if (s1.toLowerCase() === peg$c26) {
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e30); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenumericalRegister();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecomma();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseid();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f31(s1, s2, s4);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 4);
                      if (s1.toLowerCase() === peg$c27) {
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e31); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsenumericalRegister();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecomma();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseid();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f32(s1, s2, s4);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 3);
                        if (s1.toLowerCase() === peg$c28) {
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e32); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsenumericalRegister();
                          if (s2 === peg$FAILED) {
                            s2 = null;
                          }
                          peg$savedPos = s0;
                          s0 = peg$f33(s1, s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 5);
                          if (s1.toLowerCase() === peg$c29) {
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e33); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsenumericalRegister();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsecomma();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseinmediate();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parsecomma();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parseid();
                                    if (s6 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f34(s1, s2, s4, s6);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 4);
                            if (s1.toLowerCase() === peg$c30) {
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e34); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenumericalRegister();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsecomma();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseinmediate();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsecomma();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseid();
                                      if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f35(s1, s2, s4, s6);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parsecondicional_codes() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c31) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c32) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f37();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c33) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f38();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c34) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f39();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 2);
            if (s1.toLowerCase() === peg$c35) {
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e39); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f40();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 2);
              if (s1.toLowerCase() === peg$c36) {
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e40); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f41();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 2);
                if (s1.toLowerCase() === peg$c37) {
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e41); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f42();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 2);
                  if (s1.toLowerCase() === peg$c38) {
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e42); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f43();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 2);
                    if (s1.toLowerCase() === peg$c39) {
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e43); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f44();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 2);
                      if (s1.toLowerCase() === peg$c40) {
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e44); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f45();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 2);
                        if (s1.toLowerCase() === peg$c41) {
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e45); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f46();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 2);
                          if (s1.toLowerCase() === peg$c42) {
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e46); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f47();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 2);
                            if (s1.toLowerCase() === peg$c43) {
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e47); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f48();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 2);
                              if (s1.toLowerCase() === peg$c44) {
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e48); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f49();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 2);
                                if (s1.toLowerCase() === peg$c45) {
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f50();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 2);
                                  if (s1.toLowerCase() === peg$c46) {
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f51();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = input.substr(peg$currPos, 2);
                                    if (s1.toLowerCase() === peg$c33) {
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e37); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f52();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = input.substr(peg$currPos, 2);
                                      if (s1.toLowerCase() === peg$c47) {
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e51); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f53();
                                      }
                                      s0 = s1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolon();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseoperate() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearithmetic();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsemovement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseload_sotre();
        if (s0 === peg$FAILED) {
          s0 = peg$parselogical();
          if (s0 === peg$FAILED) {
            s0 = peg$parseshift_rotate();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesystem_instructions();
              if (s0 === peg$FAILED) {
                s0 = peg$parseconditional();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseatomic();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsebit_manipulacion();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseatomic();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parsearithmetic() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c48) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c49) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesimple_operand();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f56(s1, s2, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c50) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c51) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimple_operand();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f57(s1, s2, s4, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c52) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseid();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f58(s1, s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c53) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e60); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseid();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f59(s1, s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c54) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e61); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsesimple_operand();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f60(s1, s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c55) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e62); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsesimple_operand();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f61(s1, s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 5);
                if (s1.toLowerCase() === peg$c56) {
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e63); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomma();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsenumericalRegister();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsecomma();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsenumericalRegister();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parsecomma();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsenumericalRegister();
                              if (s8 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f62(s1, s2, s4, s6, s8);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 5);
                  if (s1.toLowerCase() === peg$c57) {
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e64); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsecomma();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsenumericalRegister();
                            if (s6 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f63(s1, s2, s4, s6);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 5);
                    if (s1.toLowerCase() === peg$c58) {
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e65); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenumericalRegister();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecomma();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsenumericalRegister();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsecomma();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parsenumericalRegister();
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parsecomma();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parsenumericalRegister();
                                  if (s8 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f64(s1, s2, s4, s6, s8);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 4);
                      if (s1.toLowerCase() === peg$c59) {
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e66); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsenumericalRegister();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecomma();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsenumericalRegister();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsecomma();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsenumericalRegister();
                                if (s6 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f65(s1, s2, s4, s6);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 4);
                        if (s1.toLowerCase() === peg$c60) {
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e67); }
                        }
                        if (s1 === peg$FAILED) {
                          s1 = input.substr(peg$currPos, 5);
                          if (s1.toLowerCase() === peg$c61) {
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e68); }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsenumericalRegister();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsecomma();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsesimple_operand();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f66(s1, s2, s4);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 4);
                          if (s1.toLowerCase() === peg$c62) {
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                          }
                          if (s1 === peg$FAILED) {
                            s1 = input.substr(peg$currPos, 5);
                            if (s1.toLowerCase() === peg$c63) {
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e70); }
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsenumericalRegister();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsecomma();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsenumericalRegister();
                                if (s4 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f67(s1, s2, s4);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 4);
                            if (s1.toLowerCase() === peg$c64) {
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e71); }
                            }
                            if (s1 === peg$FAILED) {
                              s1 = input.substr(peg$currPos, 5);
                              if (s1.toLowerCase() === peg$c65) {
                                peg$currPos += 5;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e72); }
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenumericalRegister();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsecomma();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsenumericalRegister();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsecomma();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parsenumericalRegister();
                                      if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f68(s1, s2, s4, s6);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 5);
                              if (s1.toLowerCase() === peg$c66) {
                                peg$currPos += 5;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e73); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsenumericalRegister();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsecomma();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsenumericalRegister();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parsecomma();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parsenumericalRegister();
                                        if (s6 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f69(s1, s2, s4, s6);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 7);
                                if (s1.toLowerCase() === peg$c67) {
                                  peg$currPos += 7;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsenumericalRegister();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsecomma();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsenumericalRegister();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parsecomma();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsenumericalRegister();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parsecomma();
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parsenumericalRegister();
                                              if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s0 = peg$f70(s1, s2, s4, s6, s8);
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 7);
                                  if (s1.toLowerCase() === peg$c68) {
                                    peg$currPos += 7;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e75); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsenumericalRegister();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsecomma();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parsenumericalRegister();
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsecomma();
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$parsenumericalRegister();
                                            if (s6 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f71(s1, s2, s4, s6);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = input.substr(peg$currPos, 7);
                                    if (s1.toLowerCase() === peg$c69) {
                                      peg$currPos += 7;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsenumericalRegister();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parsecomma();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parsenumericalRegister();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parsecomma();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parsenumericalRegister();
                                              if (s6 !== peg$FAILED) {
                                                s7 = peg$parsecomma();
                                                if (s7 !== peg$FAILED) {
                                                  s8 = peg$parsenumericalRegister();
                                                  if (s8 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f72(s1, s2, s4, s6, s8);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = input.substr(peg$currPos, 6);
                                      if (s1.toLowerCase() === peg$c70) {
                                        peg$currPos += 6;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsenumericalRegister();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsecomma();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parsenumericalRegister();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsecomma();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsenumericalRegister();
                                                if (s6 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s0 = peg$f73(s1, s2, s4, s6);
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = input.substr(peg$currPos, 6);
                                        if (s1.toLowerCase() === peg$c71) {
                                          peg$currPos += 6;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e78); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsenumericalRegister();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsecomma();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parsenumericalRegister();
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parsecomma();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parsenumericalRegister();
                                                  if (s6 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f74(s1, s2, s4, s6);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = input.substr(peg$currPos, 4);
                                          if (s1.toLowerCase() === peg$c72) {
                                            peg$currPos += 4;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e79); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            s1 = input.substr(peg$currPos, 5);
                                            if (s1.toLowerCase() === peg$c73) {
                                              peg$currPos += 5;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e80); }
                                            }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsenumericalRegister();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsecomma();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parsenumericalRegister();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parsecomma();
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parsesimple_operand();
                                                    if (s6 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s0 = peg$f75(s1, s2, s4, s6);
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = input.substr(peg$currPos, 5);
                                            if (s1.toLowerCase() === peg$c74) {
                                              peg$currPos += 5;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e81); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsenumericalRegister();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parsecomma();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parsenumericalRegister();
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parsecomma();
                                                    if (s5 !== peg$FAILED) {
                                                      s6 = peg$parsenumericalRegister();
                                                      if (s6 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s0 = peg$f76(s1, s2, s4, s6);
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = input.substr(peg$currPos, 7);
                                              if (s1.toLowerCase() === peg$c75) {
                                                peg$currPos += 7;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e82); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsenumericalRegister();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parsecomma();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parsenumericalRegister();
                                                    if (s4 !== peg$FAILED) {
                                                      s5 = peg$parsecomma();
                                                      if (s5 !== peg$FAILED) {
                                                        s6 = peg$parsenumericalRegister();
                                                        if (s6 !== peg$FAILED) {
                                                          s7 = peg$parsecomma();
                                                          if (s7 !== peg$FAILED) {
                                                            s8 = peg$parsenumericalRegister();
                                                            if (s8 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s0 = peg$f77(s1, s2, s4, s6, s8);
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = input.substr(peg$currPos, 7);
                                                if (s1.toLowerCase() === peg$c76) {
                                                  peg$currPos += 7;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e83); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsenumericalRegister();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parsecomma();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parsenumericalRegister();
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parsecomma();
                                                        if (s5 !== peg$FAILED) {
                                                          s6 = peg$parsenumericalRegister();
                                                          if (s6 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s0 = peg$f78(s1, s2, s4, s6);
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = input.substr(peg$currPos, 7);
                                                  if (s1.toLowerCase() === peg$c77) {
                                                    peg$currPos += 7;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e84); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsenumericalRegister();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsecomma();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parsenumericalRegister();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parsecomma();
                                                          if (s5 !== peg$FAILED) {
                                                            s6 = peg$parsenumericalRegister();
                                                            if (s6 !== peg$FAILED) {
                                                              s7 = peg$parsecomma();
                                                              if (s7 !== peg$FAILED) {
                                                                s8 = peg$parsenumericalRegister();
                                                                if (s8 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s0 = peg$f79(s1, s2, s4, s6, s8);
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = input.substr(peg$currPos, 6);
                                                    if (s1.toLowerCase() === peg$c78) {
                                                      peg$currPos += 6;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e85); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsenumericalRegister();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parsecomma();
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parsenumericalRegister();
                                                          if (s4 !== peg$FAILED) {
                                                            s5 = peg$parsecomma();
                                                            if (s5 !== peg$FAILED) {
                                                              s6 = peg$parsenumericalRegister();
                                                              if (s6 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s0 = peg$f80(s1, s2, s4, s6);
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = input.substr(peg$currPos, 6);
                                                      if (s1.toLowerCase() === peg$c79) {
                                                        peg$currPos += 6;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsenumericalRegister();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsecomma();
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$parsenumericalRegister();
                                                            if (s4 !== peg$FAILED) {
                                                              s5 = peg$parsecomma();
                                                              if (s5 !== peg$FAILED) {
                                                                s6 = peg$parsenumericalRegister();
                                                                if (s6 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s0 = peg$f81(s1, s2, s4, s6);
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parsemovement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c80) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 === peg$FAILED) {
            s4 = peg$parseinmediate();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f82(s1, s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c81) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinmediate();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                s8 = input.substr(peg$currPos, 4);
                if (s8.toLowerCase() === peg$c82) {
                  peg$currPos += 4;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e90); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseinmediate();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f83(s1, s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c83) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseinmediate();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsecomma();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  s8 = input.substr(peg$currPos, 4);
                  if (s8.toLowerCase() === peg$c82) {
                    peg$currPos += 4;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseinmediate();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f84(s1, s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 5);
          if (s1.toLowerCase() === peg$c84) {
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e92); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseinmediate();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parsecomma();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    s8 = input.substr(peg$currPos, 4);
                    if (s8.toLowerCase() === peg$c82) {
                      peg$currPos += 4;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e90); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseinmediate();
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f85(s1, s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c85) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e93); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseinmediate();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f86(s1, s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c85) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e93); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsenumericalRegister();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f87(s1, s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseload_sotre() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c86) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsememory_operand();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f88(s1, s2, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c87) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (s2.toLowerCase() === peg$c88) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = input.substr(peg$currPos, 3);
        if (s3.toLowerCase() === peg$c89) {
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e98); }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s4 = peg$c90;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenumericalRegister();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsememory_operand();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f89(s2, s5, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c87) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
        if (s1 !== peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (s2.toLowerCase() === peg$c88) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e97); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = input.substr(peg$currPos, 2);
          if (s3.toLowerCase() === peg$c91) {
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e100); }
          }
          if (s3 !== peg$FAILED) {
            s4 = input.charAt(peg$currPos);
            if (peg$r0.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (input.charCodeAt(peg$currPos) === 32) {
              s5 = peg$c90;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e99); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsenumericalRegister();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomma();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsememory_operand();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f90(s2, s4, s6, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c87) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
          if (s1 !== peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (s2.toLowerCase() === peg$c88) {
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e97); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = input.charAt(peg$currPos);
            if (s3.toLowerCase() === peg$c92) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e102); }
            }
            if (s3 !== peg$FAILED) {
              s4 = input.charAt(peg$currPos);
              if (peg$r0.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e101); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c90;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e99); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumericalRegister();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsememory_operand();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f91(s2, s4, s6, s8);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c93) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e103); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsememory_operand();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f92(s1, s2, s4, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 2);
              if (s1.toLowerCase() === peg$c87) {
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e96); }
              }
              if (s1 !== peg$FAILED) {
                s2 = input.charAt(peg$currPos);
                if (s2.toLowerCase() === peg$c94) {
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e104); }
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = input.substr(peg$currPos, 3);
                if (s3.toLowerCase() === peg$c95) {
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e105); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsenumericalRegister();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsecomma();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parsememory_operand();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f93(s2, s4, s6, s8);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 2);
                if (s1.toLowerCase() === peg$c87) {
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e96); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = input.charAt(peg$currPos);
                  if (s2.toLowerCase() === peg$c94) {
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e104); }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s3 = input.charAt(peg$currPos);
                  if (s3.toLowerCase() === peg$c96) {
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e106); }
                  }
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s4 = input.charAt(peg$currPos);
                  if (s4.toLowerCase() === peg$c92) {
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e102); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = input.charAt(peg$currPos);
                    if (peg$r0.test(s5)) {
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e101); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 32) {
                      s6 = peg$c90;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e99); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsenumericalRegister();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsecomma();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsememory_operand();
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f94(s2, s3, s5, s7, s9);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 5);
                  if (s1.toLowerCase() === peg$c97) {
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e107); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsecomma();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsememory_operand();
                            if (s6 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f95(s1, s2, s4, s6);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 4);
                    if (s1.toLowerCase() === peg$c98) {
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e108); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = input.charAt(peg$currPos);
                      if (peg$r0.test(s2)) {
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e101); }
                      }
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 32) {
                        s3 = peg$c90;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e99); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsecomma();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsememory_operand();
                            if (s6 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f96(s2, s4, s6);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 5);
                      if (s1.toLowerCase() === peg$c99) {
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e109); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = input.charAt(peg$currPos);
                        if (peg$r0.test(s2)) {
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e101); }
                        }
                        if (s2 === peg$FAILED) {
                          s2 = null;
                        }
                        if (input.charCodeAt(peg$currPos) === 32) {
                          s3 = peg$c90;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e99); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsenumericalRegister();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsecomma();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parsememory_operand();
                              if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f97(s2, s4, s6);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 7);
                        if (s1.toLowerCase() === peg$c100) {
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e110); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsenumericalRegister();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsecomma();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsememory_operand();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f98(s1, s2, s4);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 5);
                          if (s1.toLowerCase() === peg$c101) {
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e111); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseprfop();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsecomma();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsememory_operand();
                                if (s4 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f99(s1, s2, s4);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 4);
                            if (s1.toLowerCase() === peg$c102) {
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e112); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenumericalRegister();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsecomma();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsenumericalRegister();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsecomma();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parsememory_operand();
                                      if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f100(s1, s2, s4, s6);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 2);
                              if (s1.toLowerCase() === peg$c103) {
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e113); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = input.charAt(peg$currPos);
                                if (s2.toLowerCase() === peg$c88) {
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e97); }
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                s3 = input.charAt(peg$currPos);
                                if (s3.toLowerCase() === peg$c92) {
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e102); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = input.charAt(peg$currPos);
                                  if (peg$r0.test(s4)) {
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                  }
                                  if (s4 === peg$FAILED) {
                                    s4 = null;
                                  }
                                  if (input.charCodeAt(peg$currPos) === 32) {
                                    s5 = peg$c90;
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsenumericalRegister();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsecomma();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parsememory_operand();
                                        if (s8 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f101(s2, s4, s6, s8);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 4);
                                if (s1.toLowerCase() === peg$c104) {
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e114); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = input.charAt(peg$currPos);
                                  if (peg$r0.test(s2)) {
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = null;
                                  }
                                  if (input.charCodeAt(peg$currPos) === 32) {
                                    s3 = peg$c90;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsenumericalRegister();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parsecomma();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parsememory_operand();
                                        if (s6 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f102(s2, s4, s6);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 2);
                                  if (s1.toLowerCase() === peg$c103) {
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e113); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = input.charAt(peg$currPos);
                                    if (s2.toLowerCase() === peg$c105) {
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e115); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = null;
                                    }
                                    s3 = input.substr(peg$currPos, 3);
                                    if (s3.toLowerCase() === peg$c95) {
                                      peg$currPos += 3;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e105); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsenumericalRegister();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parsecomma();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsenumericalRegister();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parsecomma();
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parsenumericalRegister();
                                              if (s8 !== peg$FAILED) {
                                                s9 = peg$parsecomma();
                                                if (s9 !== peg$FAILED) {
                                                  s10 = peg$parsememory_operand();
                                                  if (s10 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f103(s2, s4, s6, s8, s10);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = input.substr(peg$currPos, 2);
                                    if (s1.toLowerCase() === peg$c103) {
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e113); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = input.charAt(peg$currPos);
                                      if (s2.toLowerCase() === peg$c105) {
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e115); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = null;
                                      }
                                      s3 = input.substr(peg$currPos, 2);
                                      if (s3.toLowerCase() === peg$c106) {
                                        peg$currPos += 2;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e116); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = input.charAt(peg$currPos);
                                        if (peg$r0.test(s4)) {
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = null;
                                        }
                                        if (input.charCodeAt(peg$currPos) === 32) {
                                          s5 = peg$c90;
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsenumericalRegister();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parsecomma();
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parsenumericalRegister();
                                              if (s8 !== peg$FAILED) {
                                                s9 = peg$parsecomma();
                                                if (s9 !== peg$FAILED) {
                                                  s10 = peg$parsememory_operand();
                                                  if (s10 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f104(s2, s4, s6, s8, s10);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = input.substr(peg$currPos, 5);
                                      if (s1.toLowerCase() === peg$c107) {
                                        peg$currPos += 5;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e117); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsenumericalRegister();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsecomma();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parsenumericalRegister();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsecomma();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsememory_operand();
                                                if (s6 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s0 = peg$f105(s1, s2, s4, s6);
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = input.substr(peg$currPos, 4);
                                        if (s1.toLowerCase() === peg$c108) {
                                          peg$currPos += 4;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e118); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = input.charAt(peg$currPos);
                                          if (peg$r0.test(s2)) {
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = null;
                                          }
                                          if (input.charCodeAt(peg$currPos) === 32) {
                                            s3 = peg$c90;
                                            peg$currPos++;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parsenumericalRegister();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsecomma();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsememory_operand();
                                                if (s6 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s0 = peg$f106(s2, s4, s6);
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }

    return s0;
  }

  function peg$parselogical() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c109) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c110) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesimple_operand();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f107(s1, s2, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c111) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c112) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e123); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimple_operand();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f108(s1, s2, s4, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c113) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e124); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenumericalRegister();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecomma();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsesimple_operand();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f109(s1, s2, s4, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c114) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenumericalRegister();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecomma();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsesimple_operand();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f110(s1, s2, s4, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c115) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e126); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsesimple_operand();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f111(s1, s2, s4, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c116) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e127); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsesimple_operand();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f112(s1, s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c117) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e128); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomma();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsenumericalRegister();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsecomma();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsesimple_operand();
                          if (s6 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f113(s1, s2, s4, s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 4);
                  if (s1.toLowerCase() === peg$c118) {
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e129); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsesimple_operand();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f114(s1, s2, s4);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseshift_rotate() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c82) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseinmediate();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f115(s1, s2, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c82) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumericalRegister();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f116(s1, s2, s4, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c119) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenumericalRegister();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecomma();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseinmediate();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f117(s1, s2, s4, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c119) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenumericalRegister();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecomma();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsenumericalRegister();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f118(s1, s2, s4, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c120) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e132); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseinmediate();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f119(s1, s2, s4, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c120) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e132); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsenumericalRegister();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsecomma();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsenumericalRegister();
                        if (s6 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f120(s1, s2, s4, s6);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c121) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e133); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomma();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsenumericalRegister();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsecomma();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseinmediate();
                          if (s6 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f121(s1, s2, s4, s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 4);
                  if (s1.toLowerCase() === peg$c121) {
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e133); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsecomma();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsenumericalRegister();
                            if (s6 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f122(s1, s2, s4, s6);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

    return s0;
  }

  function peg$parsesystem_instructions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c122) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 2);
      if (s2.toLowerCase() === peg$c123) {
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 50) {
          s3 = peg$c124;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c125) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e138); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r1.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e139); }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = input.charAt(peg$currPos);
          if (peg$r2.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e140); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsenumericalRegister();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f123(s3, s5, s6, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c126) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinmediate();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f124(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c127) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c90;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseinmediate();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f125(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c128) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e143); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebarrier_option();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f126(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c129) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e144); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebarrier_option();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f127(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c130) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e145); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f128(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c131) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e146); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseinmediate();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f129(s1, s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 3);
                  if (s1.toLowerCase() === peg$c132) {
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e147); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = input.substr(peg$currPos, 3);
                    if (s2.toLowerCase() === peg$c133) {
                      peg$currPos += 3;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e148); }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f130(s1, s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 4);
                    if (s1.toLowerCase() === peg$c134) {
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e149); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenumericalRegister();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecomma();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsespecial_prupose_register();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f131(s1, s2, s4);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 4);
                      if (s1.toLowerCase() === peg$c135) {
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e150); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsespecial_prupose_register();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecomma();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsenumericalRegister();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f132(s1, s2, s4);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 4);
                        if (s1.toLowerCase() === peg$c135) {
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e150); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsespecial_prupose_register();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsecomma();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseinmediate();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f133(s1, s2, s4);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 3);
                          if (s1.toLowerCase() === peg$c136) {
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e151); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f134(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 3);
                            if (s1.toLowerCase() === peg$c137) {
                              peg$currPos += 3;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e152); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f135(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 4);
                              if (s1.toLowerCase() === peg$c138) {
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e153); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f136(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 4);
                                if (s1.toLowerCase() === peg$c139) {
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e154); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseinmediate();
                                  if (s2 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f137(s1, s2);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 4);
                                  if (s1.toLowerCase() === peg$c140) {
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e155); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseinmediate();
                                    if (s2 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f138(s1, s2);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = input.substr(peg$currPos, 3);
                                    if (s1.toLowerCase() === peg$c141) {
                                      peg$currPos += 3;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e156); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f139(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = input.substr(peg$currPos, 3);
                                      if (s1.toLowerCase() === peg$c142) {
                                        peg$currPos += 3;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e157); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f140(s1);
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = input.substr(peg$currPos, 5);
                                        if (s1.toLowerCase() === peg$c143) {
                                          peg$currPos += 5;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e158); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f141(s1);
                                        }
                                        s0 = s1;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parsebarrier_option() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c144) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsecomma();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 2);
        if (s6.toLowerCase() === peg$c87) {
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = input.substr(peg$currPos, 2);
          if (s6.toLowerCase() === peg$c103) {
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e113); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f142(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c145) {
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e161); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = input.substr(peg$currPos, 2);
          if (s6.toLowerCase() === peg$c87) {
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse_();
            s6 = input.substr(peg$currPos, 2);
            if (s6.toLowerCase() === peg$c103) {
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e113); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f143();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 3);
        if (s1.toLowerCase() === peg$c146) {
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e162); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse_();
            s6 = input.substr(peg$currPos, 2);
            if (s6.toLowerCase() === peg$c87) {
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e96); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parse_();
              s6 = input.substr(peg$currPos, 2);
              if (s6.toLowerCase() === peg$c103) {
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e113); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f144();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c87) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f145();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 2);
            if (s1.toLowerCase() === peg$c103) {
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e113); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f146();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 2);
              if (s1.toLowerCase() === peg$c147) {
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e163); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f147();
              }
              s0 = s1;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parsebit_manipulacion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c148) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumericalRegister();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseinmediate();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomma();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseinmediate();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f148(s1, s2, s4, s6, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c149) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseinmediate();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseinmediate();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f149(s1, s2, s4, s6, s8);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c150) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e167); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenumericalRegister();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f150(s1, s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c151) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e168); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenumericalRegister();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f151(s1, s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 5);
            if (s1.toLowerCase() === peg$c152) {
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e169); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsenumericalRegister();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsecomma();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseinmediate();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f152(s1, s2, s4, s6, s8);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 5);
              if (s1.toLowerCase() === peg$c153) {
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e170); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsenumericalRegister();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f153(s1, s2, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c154) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e171); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomma();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsenumericalRegister();
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f154(s1, s2, s4);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 6);
                  if (s1.toLowerCase() === peg$c155) {
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e172); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f155(s1, s2, s4);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 6);
                    if (s1.toLowerCase() === peg$c156) {
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e173); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenumericalRegister();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecomma();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsenumericalRegister();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f156(s1, s2, s4);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.charAt(peg$currPos);
                      if (peg$r3.test(s1)) {
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e174); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = null;
                      }
                      s2 = input.substr(peg$currPos, 5);
                      if (s2.toLowerCase() === peg$c157) {
                        peg$currPos += 5;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e175); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsenumericalRegister();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsecomma();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsenumericalRegister();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parsecomma();
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseinmediate();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parsecomma();
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parseinmediate();
                                    if (s9 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f157(s1, s3, s5, s7, s9);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.charAt(peg$currPos);
                        if (peg$r3.test(s1)) {
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e174); }
                        }
                        if (s1 === peg$FAILED) {
                          s1 = null;
                        }
                        s2 = input.substr(peg$currPos, 4);
                        if (s2.toLowerCase() === peg$c158) {
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e176); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsenumericalRegister();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsecomma();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsenumericalRegister();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsecomma();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseinmediate();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parsecomma();
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parseinmediate();
                                      if (s9 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f158(s1, s3, s5, s7, s9);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.charAt(peg$currPos);
                          if (peg$r3.test(s1)) {
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e174); }
                          }
                          if (s1 === peg$FAILED) {
                            s1 = null;
                          }
                          s2 = input.substr(peg$currPos, 2);
                          if (s2.toLowerCase() === peg$c159) {
                            peg$currPos += 2;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e177); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = input.charAt(peg$currPos);
                            if (peg$r0.test(s3)) {
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e101); }
                            }
                            if (s3 === peg$FAILED) {
                              s3 = null;
                            }
                            if (input.charCodeAt(peg$currPos) === 32) {
                              s4 = peg$c90;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e99); }
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsenumericalRegister();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsecomma();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsenumericalRegister();
                                  if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f159(s1, s3, s5, s7);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 5);
                            if (s1.toLowerCase() === peg$c160) {
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e178); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenumericalRegister();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsecomma();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsenumericalRegister();
                                  if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f160(s1, s2, s4);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parseatomic() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c161) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (s2.toLowerCase() === peg$c94) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c105) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (input.charCodeAt(peg$currPos) === 32) {
        s5 = peg$c90;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsenumericalRegister();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsenumericalRegister();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsememory_operand();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f161(s2, s3, s4, s6, s8, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c161) {
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e180); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (s2.toLowerCase() === peg$c94) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c105) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c162) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e181); }
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s5 = peg$c90;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenumericalRegister();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenumericalRegister();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsecomma();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsenumericalRegister();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsecomma();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsenumericalRegister();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsecomma();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsememory_operand();
                            if (s14 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f162(s2, s3, s6, s8, s10, s12, s14);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c163) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e182); }
        }
        if (s1 !== peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (s2.toLowerCase() === peg$c94) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = input.charAt(peg$currPos);
          if (s3.toLowerCase() === peg$c105) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e115); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = input.charAt(peg$currPos);
          if (peg$r0.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e101); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (input.charCodeAt(peg$currPos) === 32) {
            s5 = peg$c90;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenumericalRegister();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenumericalRegister();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsecomma();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsememory_operand();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f163(s2, s3, s4, s6, s8, s10);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c164) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e183); }
          }
          if (s1 !== peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (s2.toLowerCase() === peg$c94) {
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = input.charAt(peg$currPos);
            if (s3.toLowerCase() === peg$c105) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e115); }
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = input.charAt(peg$currPos);
            if (peg$r0.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (input.charCodeAt(peg$currPos) === 32) {
              s5 = peg$c90;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e99); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsenumericalRegister();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomma();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsememory_operand();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f164(s2, s3, s4, s6, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 3);
            if (s1.toLowerCase() === peg$c165) {
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e184); }
            }
            if (s1 !== peg$FAILED) {
              s2 = input.charAt(peg$currPos);
              if (s2.toLowerCase() === peg$c94) {
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e104); }
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s3 = input.charAt(peg$currPos);
              if (s3.toLowerCase() === peg$c105) {
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e115); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = input.charAt(peg$currPos);
              if (peg$r0.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e101); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c90;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e99); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumericalRegister();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenumericalRegister();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsecomma();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsememory_operand();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f165(s2, s3, s4, s6, s8, s10);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseconditional() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c166) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumericalRegister();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinmediate();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseinmediate();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomma();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parsecondicional_codes();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f166(s1, s2, s4, s6, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c166) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumericalRegister();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseinmediate();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    s9 = peg$parsecondicional_codes();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f167(s1, s2, s4, s6, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c167) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumericalRegister();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomma();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseinmediate();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecomma();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseinmediate();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsecomma();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      s9 = peg$parsecondicional_codes();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f168(s1, s2, s4, s6, s9);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 5);
          if (s1.toLowerCase() === peg$c167) {
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e187); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenumericalRegister();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomma();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenumericalRegister();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecomma();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseinmediate();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsecomma();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parsecondicional_codes();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f169(s1, s2, s4, s6, s9);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 5);
            if (s1.toLowerCase() === peg$c168) {
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e188); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumericalRegister();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecomma();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsenumericalRegister();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsecomma();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s7 = peg$parsecondicional_codes();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f170(s1, s2, s4, s7);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 5);
              if (s1.toLowerCase() === peg$c169) {
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e189); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenumericalRegister();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecomma();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsenumericalRegister();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsecomma();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        s7 = peg$parsecondicional_codes();
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f171(s1, s2, s4, s7);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 5);
                if (s1.toLowerCase() === peg$c170) {
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e190); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenumericalRegister();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomma();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsenumericalRegister();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsecomma();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          s7 = peg$parsecondicional_codes();
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f172(s1, s2, s4, s7);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 5);
                  if (s1.toLowerCase() === peg$c171) {
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e191); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumericalRegister();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecomma();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsenumericalRegister();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsecomma();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            s7 = peg$parsenumericalRegister();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsecomma();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse_();
                                s10 = peg$parsecondicional_codes();
                                if (s10 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f173(s1, s2, s4, s7, s10);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 6);
                    if (s1.toLowerCase() === peg$c172) {
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e192); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenumericalRegister();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecomma();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          s5 = peg$parsecondicional_codes();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f174(s1, s2, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 5);
                      if (s1.toLowerCase() === peg$c173) {
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e193); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsenumericalRegister();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecomma();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            s5 = peg$parsecondicional_codes();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f175(s1, s2, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 6);
                        if (s1.toLowerCase() === peg$c174) {
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e194); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsenumericalRegister();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsecomma();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsenumericalRegister();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parsecomma();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsenumericalRegister();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsecomma();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parse_();
                                      s9 = peg$parsecondicional_codes();
                                      if (s9 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f176(s1, s2, s4, s6, s9);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 6);
                          if (s1.toLowerCase() === peg$c175) {
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e195); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsenumericalRegister();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsecomma();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsenumericalRegister();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parsecomma();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsenumericalRegister();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsecomma();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        s9 = peg$parsecondicional_codes();
                                        if (s9 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f177(s1, s2, s4, s6, s9);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 6);
                            if (s1.toLowerCase() === peg$c176) {
                              peg$currPos += 6;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e196); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenumericalRegister();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsecomma();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsenumericalRegister();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsecomma();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parsenumericalRegister();
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parsecomma();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          s9 = peg$parsecondicional_codes();
                                          if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s0 = peg$f178(s1, s2, s4, s6, s9);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parsechecksum_instructions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c177) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c90;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsenumericalRegister();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenumericalRegister();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenumericalRegister();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f179(s2, s4, s6, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c177) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e198); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c90;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumericalRegister();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenumericalRegister();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f180(s2, s4, s6, s8);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 6);
        if (s1.toLowerCase() === peg$c178) {
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e200); }
        }
        if (s1 !== peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r0.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e101); }
          }
          if (s2 === peg$FAILED) {
            s2 = input.charAt(peg$currPos);
            if (peg$r5.test(s2)) {
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e201); }
            }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c90;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumericalRegister();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumericalRegister();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomma();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenumericalRegister();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f181(s2, s4, s6, s8);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }

    return s0;
  }

  function peg$parsesimple_operand() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumericalRegister();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseoperands();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f182(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinmediate();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f183(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parseoperands() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c82) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s2 === peg$FAILED) {
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c119) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e131); }
      }
      if (s2 === peg$FAILED) {
        s2 = input.substr(peg$currPos, 4);
        if (s2.toLowerCase() === peg$c120) {
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e132); }
        }
        if (s2 === peg$FAILED) {
          s2 = input.substr(peg$currPos, 4);
          if (s2.toLowerCase() === peg$c121) {
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e133); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinmediate();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f184(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = input.charAt(peg$currPos);
      if (peg$r3.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e174); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = input.substr(peg$currPos, 3);
      if (s3.toLowerCase() === peg$c179) {
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e204); }
      }
      if (s3 === peg$FAILED) {
        s3 = input.substr(peg$currPos, 3);
        if (s3.toLowerCase() === peg$c180) {
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e205); }
        }
        if (s3 === peg$FAILED) {
          s3 = input.substr(peg$currPos, 3);
          if (s3.toLowerCase() === peg$c181) {
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e206); }
          }
          if (s3 === peg$FAILED) {
            s3 = input.substr(peg$currPos, 3);
            if (s3.toLowerCase() === peg$c182) {
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e207); }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseinmediate();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f185(s2, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }

    return s0;
  }

  function peg$parsememory_operand() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c183;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseadderssing_Extension();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c184;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e210); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f186(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c183;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e209); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseadderssing_simple();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c184;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e210); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseinmediate();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f187(s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c183;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e209); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadderssing_simple();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c184;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e210); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 33) {
                s8 = peg$c185;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e211); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f188(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c186;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e212); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseid();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f189(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parseid();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f190(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  function peg$parseadderssing_simple() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsegeneralPurposeRegister();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinmediate();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f191(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneralPurposeRegister();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f192(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = input.substr(peg$currPos, 2);
        if (s2.toLowerCase() === peg$c187) {
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e213); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinmediate();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f193(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = input.substr(peg$currPos, 2);
          if (s2.toLowerCase() === peg$c187) {
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e213); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f194();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseadderssing_Extension() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegeneralPurposeRegister();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsegeneralPurposeRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = input.substr(peg$currPos, 4);
            if (s6.toLowerCase() === peg$c188) {
              peg$currPos += 4;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e215); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseinmediate();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f195(s1, s3, s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneralPurposeRegister();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsegeneralPurposeRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$currPos;
              s7 = input.charAt(peg$currPos);
              if (peg$r3.test(s7)) {
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e174); }
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = input.substr(peg$currPos, 3);
              if (s8.toLowerCase() === peg$c181) {
                peg$currPos += 3;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e206); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseinmediate();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f196(s1, s3, s6, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneralPurposeRegister();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecomma();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsegeneralPurposeRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecomma();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                s6 = input.substr(peg$currPos, 4);
                if (s6.toLowerCase() === peg$c82) {
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e90); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseinmediate();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f197(s1, s3, s6, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }

    return s0;
  }

  function peg$parseprfop() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 80) {
      s2 = peg$c189;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e217); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.substr(peg$currPos, 2);
      if (s3.toLowerCase() === peg$c87) {
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s3 === peg$FAILED) {
        s3 = input.substr(peg$currPos, 2);
        if (s3.toLowerCase() === peg$c190) {
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e218); }
        }
        if (s3 === peg$FAILED) {
          s3 = input.substr(peg$currPos, 2);
          if (s3.toLowerCase() === peg$c103) {
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e113); }
          }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c105) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r6.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e219); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = input.substr(peg$currPos, 4);
        if (s6.toLowerCase() === peg$c191) {
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e220); }
        }
        if (s6 === peg$FAILED) {
          s6 = input.substr(peg$currPos, 4);
          if (s6.toLowerCase() === peg$c192) {
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e221); }
          }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f198(s3, s5, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }

    return s0;
  }

  function peg$parsecomma() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c193;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e223); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }

    return s0;
  }

  function peg$parsenewLine() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 10) {
      s2 = peg$c194;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e227); }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f199();
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e226); }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r8.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r8.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e229); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f200();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }

    return s0;
  }

  function peg$parses() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 32) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f201();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehash() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c195;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }

    return s0;
  }

  function peg$parseid() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.charAt(peg$currPos);
    if (peg$r9.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r10.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e234); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r10.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e234); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f202();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseslash() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c196;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }

    return s0;
  }

  function peg$parsesemicolon() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 59) {
      s2 = peg$c197;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r11.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r12.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e241); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r13.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e242); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r13.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e242); }
          }
        }
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r12.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e241); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r12.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e241); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = input.charAt(peg$currPos);
          if (peg$r14.test(s7)) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e243); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = input.charAt(peg$currPos);
            if (peg$r13.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e242); }
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = input.charAt(peg$currPos);
              if (peg$r13.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e242); }
              }
            }
            s9 = [];
            s10 = input.charAt(peg$currPos);
            if (peg$r12.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e241); }
            }
            if (s10 !== peg$FAILED) {
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = input.charAt(peg$currPos);
                if (peg$r12.test(s10)) {
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e241); }
                }
              }
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = input.charAt(peg$currPos);
            if (peg$r14.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e243); }
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = input.charAt(peg$currPos);
              if (peg$r13.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e242); }
              }
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = input.charAt(peg$currPos);
                if (peg$r13.test(s9)) {
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e242); }
                }
              }
              s9 = [];
              s10 = input.charAt(peg$currPos);
              if (peg$r12.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e241); }
              }
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = input.charAt(peg$currPos);
                  if (peg$r12.test(s10)) {
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e241); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = input.charAt(peg$currPos);
          if (peg$r11.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e240); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f203();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseslash();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseslash();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (peg$r15.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e244); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r15.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e244); }
            }
          }
          peg$savedPos = s0;
          s0 = peg$f204();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesemicolon();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = input.charAt(peg$currPos);
          if (peg$r15.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e244); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r15.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e244); }
            }
          }
          peg$savedPos = s0;
          s0 = peg$f205();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }

    return s0;
  }

  function peg$parsecolon() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c198;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }

    return s0;
  }

  function peg$parsevariable_posible() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c199) {
      s1 = peg$c199;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e247); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f206();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e248); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f207();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c201) {
          s1 = peg$c201;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e249); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f208();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c202) {
            s1 = peg$c202;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e250); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f209();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c203) {
              s1 = peg$c203;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e251); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f210();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c204) {
                s1 = peg$c204;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e252); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f211();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c205) {
                  s1 = peg$c205;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e253); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f212();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c206) {
                    s1 = peg$c206;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e254); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f213();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c207) {
                      s1 = peg$c207;
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e255); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f214();
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevariables() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsevariable();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsevariable();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f215(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }

    return s0;
  }

  function peg$parsevariable() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolon();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse__();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse__();
        }
        s4 = peg$parsevariable_posible();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parsestring();
          if (s6 === peg$FAILED) {
            s6 = peg$parseinmediate();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f216(s1, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }

    return s0;
  }

  function peg$parsenumericalRegister() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c208) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e259); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f217();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneralPurposeRegister();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f218(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefloatingPointRegister();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f219(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = input.substr(peg$currPos, 2);
          if (s2.toLowerCase() === peg$c187) {
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e213); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f220();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }

    return s0;
  }

  function peg$parsegeneralPurposeRegister() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 120) {
      s2 = peg$c96;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinteger();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f221(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 119) {
        s2 = peg$c209;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e262); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f222(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e260); }
    }

    return s0;
  }

  function peg$parsefloatingPointRegister() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 100) {
      s2 = peg$c210;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinteger();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f223(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 115) {
        s2 = peg$c211;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e265); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f224(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereal();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f225(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f226(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e266); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c212;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r16.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r16.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e269); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f227();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e267); }
    }

    return s0;
  }

  function peg$parsereal() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c212;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r16.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r16.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e269); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c13;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r16.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e269); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r16.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e269); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f228();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c213;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e272); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c213;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e272); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e273); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c213;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e272); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e273); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c213;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e272); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f229();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e271); }
    }

    return s0;
  }

  function peg$parseinmediate() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsehash();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c214) {
      s3 = peg$c214;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e275); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r17.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e276); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r17.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e276); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f230(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsehash();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c215) {
        s3 = peg$c215;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e277); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r18.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e278); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r18.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e278); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f231(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsehash();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parse_();
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f232(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsehash();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsechar();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parse_();
            s3 = peg$parsechar();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f233(s1);
          }
          s0 = s1;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e274); }
    }

    return s0;
  }

  function peg$parsespecial_prupose_register() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c216) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e280); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f234();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c217) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e281); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f235();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = input.substr(peg$currPos, 3);
        if (s2.toLowerCase() === peg$c218) {
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e282); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f236();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = input.substr(peg$currPos, 7);
          if (s2.toLowerCase() === peg$c219) {
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e283); }
          }
          if (s2 !== peg$FAILED) {
            s3 = input.charAt(peg$currPos);
            if (peg$r6.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e219); }
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f237(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = input.substr(peg$currPos, 6);
            if (s2.toLowerCase() === peg$c220) {
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e284); }
            }
            if (s2 !== peg$FAILED) {
              s3 = input.charAt(peg$currPos);
              if (peg$r6.test(s3)) {
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e219); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f238(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              s2 = input.substr(peg$currPos, 5);
              if (s2.toLowerCase() === peg$c221) {
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e285); }
              }
              if (s2 !== peg$FAILED) {
                s3 = input.charAt(peg$currPos);
                if (peg$r19.test(s3)) {
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e286); }
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f239(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                s2 = input.substr(peg$currPos, 5);
                if (s2.toLowerCase() === peg$c222) {
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e287); }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f240();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  s2 = input.substr(peg$currPos, 7);
                  if (s2.toLowerCase() === peg$c223) {
                    peg$currPos += 7;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e288); }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f241();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    s2 = input.substr(peg$currPos, 7);
                    if (s2.toLowerCase() === peg$c224) {
                      peg$currPos += 7;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e289); }
                    }
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f242();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parse_();
                      s2 = input.substr(peg$currPos, 4);
                      if (s2.toLowerCase() === peg$c225) {
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e290); }
                      }
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f243();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse_();
                        s2 = input.substr(peg$currPos, 4);
                        if (s2.toLowerCase() === peg$c226) {
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e291); }
                        }
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f244();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parse_();
                          s2 = input.substr(peg$currPos, 4);
                          if (s2.toLowerCase() === peg$c227) {
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e292); }
                          }
                          if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f245();
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parse_();
                            s2 = input.substr(peg$currPos, 4);
                            if (s2.toLowerCase() === peg$c228) {
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e293); }
                            }
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f246();
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parse_();
                              s2 = input.substr(peg$currPos, 10);
                              if (s2.toLowerCase() === peg$c229) {
                                peg$currPos += 10;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e294); }
                              }
                              if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f247();
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e279); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c230;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e296); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s5 = peg$c230;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e296); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e273); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
          s5 = peg$c230;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e296); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e273); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c230;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e296); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f248();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e295); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["init"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
